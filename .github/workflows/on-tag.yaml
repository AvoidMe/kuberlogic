name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ github.sha }}
          restore-keys: |
            docker-cache-

      - name: Build the new images
        run: |
          make docker-build

  setup_and_test:
    name: Setup and test
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - type: postgresql
            pg_version: 13
          - type: mysql
            my_version: 5.7.31

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.19.0'
          kubernetes version: 'v1.20.5'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure logs
        working-directory: ./modules/apiserver/tests
        run: |
          echo Your testid label value is $GITHUB_RUN_ID
          make configure-logs
        env:
          LOGZ_IO_TOKEN: ${{ secrets.LOGZ_IO_TOKEN }}
          LOGZ_IO_LISTENER: ${{ secrets.LOGZ_IO_LISTENER }}

      - name: Restore docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ github.sha }}
          skip-save: true
          restore-keys: |
            docker-cache-

      - name: Deploy operator
        run: |
          make install deploy

      - name: Setup minio for backup storage
        working-directory: ./modules/apiserver/tests
        run: |
          make deploy-minio

      - name: Waiting ready the pods
        run: |
          kubectl wait --for=condition=Ready pods --all --timeout=5m

      - name: Show pod status
        run: |
          kubectl logs -l app=minio
          docker images
        if: ${{ failure() }}

      - name: Create test bucket (backup storage)
        working-directory: ./modules/apiserver/tests
        run: |
          make create-bucket

      - name: Ensure keycloak is ready
        working-directory: ./modules/apiserver/tests/config
        run: |
          ./wait-for-keycloak.sh

      - name: Run tests against ready environment
        working-directory: ./modules/apiserver/tests
        run: |
          KUBERLOGIC_KUBECONFIGPATH=${HOME}/.kube/config make remote-test RUN=/$TYPE
        env:
          PG_VERSION: ${{ matrix.pg_version }}
          MY_VERSION: ${{ matrix.my_version }}
          TYPE: ${{ matrix.type }}

      - name: Show status
        run: |
          kubectl get pod,sts,deploy,svc,cj,job -o yaml
        if: ${{ failure() }}

      - name: Generating logs
        working-directory: ./modules/apiserver/tests
        run: |
          for p in $(kubectl get pods -o custom-columns=:.metadata.name); do
            kubectl describe pod $p > kuberlogic-$p-describe.log
            kubectl logs --tail=-1 --all-containers > kuberlogic-$p-logs.log
          done

          kubectl get pod -o yaml --all-namespaces > pods-status.log
          kubectl get secrets -o yaml --all-namespaces > secrets.log
          kubectl get endpoints -o yaml --all-namespaces > endpoints.log
          kubectl get services -o yaml --all-namespaces > services.log
          kubectl get kuberlogic -o yaml --all-namespaces > kuberlogics.log
        if: ${{ always() }}
        continue-on-error: true

      - name: Archive logs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.type }}-${{ matrix.pg_version }}${{ matrix.my_version }}-logs
          path: |
            ./modules/apiserver/tests/*.log
        if: ${{ always() }}

  release:
    name: Release images
    runs-on: ubuntu-latest
    needs: setup_and_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Restore docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        with:
          key: docker-cache-${{ github.sha }}
          skip-save: true
          restore-keys: |
            docker-cache-

      - name: Push the new images
        run: |
          make docker-push

    #      - name: Release
    #        uses: docker://antonyurchenko/git-release:v4.1.0
    #        env:
    #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #          PRE_RELEASE: true
    #        with:
    #          args: |
    #            installer.zip