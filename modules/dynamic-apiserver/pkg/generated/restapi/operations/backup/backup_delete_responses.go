// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// BackupDeleteOKCode is the HTTP code returned for type BackupDeleteOK
const BackupDeleteOKCode int = 200

/*BackupDeleteOK item deleted

swagger:response backupDeleteOK
*/
type BackupDeleteOK struct {
}

// NewBackupDeleteOK creates BackupDeleteOK with default headers values
func NewBackupDeleteOK() *BackupDeleteOK {

	return &BackupDeleteOK{}
}

// WriteResponse to the client
func (o *BackupDeleteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// BackupDeleteBadRequestCode is the HTTP code returned for type BackupDeleteBadRequest
const BackupDeleteBadRequestCode int = 400

/*BackupDeleteBadRequest invalid input, object invalid

swagger:response backupDeleteBadRequest
*/
type BackupDeleteBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewBackupDeleteBadRequest creates BackupDeleteBadRequest with default headers values
func NewBackupDeleteBadRequest() *BackupDeleteBadRequest {

	return &BackupDeleteBadRequest{}
}

// WithPayload adds the payload to the backup delete bad request response
func (o *BackupDeleteBadRequest) WithPayload(payload *models.Error) *BackupDeleteBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the backup delete bad request response
func (o *BackupDeleteBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BackupDeleteBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BackupDeleteUnauthorizedCode is the HTTP code returned for type BackupDeleteUnauthorized
const BackupDeleteUnauthorizedCode int = 401

/*BackupDeleteUnauthorized bad authentication

swagger:response backupDeleteUnauthorized
*/
type BackupDeleteUnauthorized struct {
}

// NewBackupDeleteUnauthorized creates BackupDeleteUnauthorized with default headers values
func NewBackupDeleteUnauthorized() *BackupDeleteUnauthorized {

	return &BackupDeleteUnauthorized{}
}

// WriteResponse to the client
func (o *BackupDeleteUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// BackupDeleteForbiddenCode is the HTTP code returned for type BackupDeleteForbidden
const BackupDeleteForbiddenCode int = 403

/*BackupDeleteForbidden bad permissions

swagger:response backupDeleteForbidden
*/
type BackupDeleteForbidden struct {
}

// NewBackupDeleteForbidden creates BackupDeleteForbidden with default headers values
func NewBackupDeleteForbidden() *BackupDeleteForbidden {

	return &BackupDeleteForbidden{}
}

// WriteResponse to the client
func (o *BackupDeleteForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// BackupDeleteNotFoundCode is the HTTP code returned for type BackupDeleteNotFound
const BackupDeleteNotFoundCode int = 404

/*BackupDeleteNotFound item not found

swagger:response backupDeleteNotFound
*/
type BackupDeleteNotFound struct {
}

// NewBackupDeleteNotFound creates BackupDeleteNotFound with default headers values
func NewBackupDeleteNotFound() *BackupDeleteNotFound {

	return &BackupDeleteNotFound{}
}

// WriteResponse to the client
func (o *BackupDeleteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// BackupDeleteUnprocessableEntityCode is the HTTP code returned for type BackupDeleteUnprocessableEntity
const BackupDeleteUnprocessableEntityCode int = 422

/*BackupDeleteUnprocessableEntity bad validation

swagger:response backupDeleteUnprocessableEntity
*/
type BackupDeleteUnprocessableEntity struct {
}

// NewBackupDeleteUnprocessableEntity creates BackupDeleteUnprocessableEntity with default headers values
func NewBackupDeleteUnprocessableEntity() *BackupDeleteUnprocessableEntity {

	return &BackupDeleteUnprocessableEntity{}
}

// WriteResponse to the client
func (o *BackupDeleteUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(422)
}

// BackupDeleteServiceUnavailableCode is the HTTP code returned for type BackupDeleteServiceUnavailable
const BackupDeleteServiceUnavailableCode int = 503

/*BackupDeleteServiceUnavailable internal server error

swagger:response backupDeleteServiceUnavailable
*/
type BackupDeleteServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewBackupDeleteServiceUnavailable creates BackupDeleteServiceUnavailable with default headers values
func NewBackupDeleteServiceUnavailable() *BackupDeleteServiceUnavailable {

	return &BackupDeleteServiceUnavailable{}
}

// WithPayload adds the payload to the backup delete service unavailable response
func (o *BackupDeleteServiceUnavailable) WithPayload(payload *models.Error) *BackupDeleteServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the backup delete service unavailable response
func (o *BackupDeleteServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BackupDeleteServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
