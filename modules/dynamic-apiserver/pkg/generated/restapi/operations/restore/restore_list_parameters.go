// Code generated by go-swagger; DO NOT EDIT.

package restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewRestoreListParams creates a new RestoreListParams object
//
// There are no default values defined in the spec.
func NewRestoreListParams() RestoreListParams {

	return RestoreListParams{}
}

// RestoreListParams contains all the bound params for the restore list operation
// typically these are obtained from a http.Request
//
// swagger:parameters restoreList
type RestoreListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*service Resource ID to query backups/restores by
	  Max Length: 20
	  Min Length: 3
	  Pattern: [a-z0-9]([-a-z0-9]*[a-z0-9])?
	  In: query
	*/
	ServiceID *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRestoreListParams() beforehand.
func (o *RestoreListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qServiceID, qhkServiceID, _ := qs.GetOK("ServiceID")
	if err := o.bindServiceID(qServiceID, qhkServiceID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindServiceID binds and validates parameter ServiceID from query.
func (o *RestoreListParams) bindServiceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ServiceID = &raw

	if err := o.validateServiceID(formats); err != nil {
		return err
	}

	return nil
}

// validateServiceID carries on validations for parameter ServiceID
func (o *RestoreListParams) validateServiceID(formats strfmt.Registry) error {

	if err := validate.MinLength("ServiceID", "query", *o.ServiceID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("ServiceID", "query", *o.ServiceID, 20); err != nil {
		return err
	}

	if err := validate.Pattern("ServiceID", "query", *o.ServiceID, `[a-z0-9]([-a-z0-9]*[a-z0-9])?`); err != nil {
		return err
	}

	return nil
}
