// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// ServiceCredentialsUpdateHandlerFunc turns a function with the right signature into a service credentials update handler
type ServiceCredentialsUpdateHandlerFunc func(ServiceCredentialsUpdateParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceCredentialsUpdateHandlerFunc) Handle(params ServiceCredentialsUpdateParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ServiceCredentialsUpdateHandler interface for that can handle valid service credentials update params
type ServiceCredentialsUpdateHandler interface {
	Handle(ServiceCredentialsUpdateParams, *models.Principal) middleware.Responder
}

// NewServiceCredentialsUpdate creates a new http.Handler for the service credentials update operation
func NewServiceCredentialsUpdate(ctx *middleware.Context, handler ServiceCredentialsUpdateHandler) *ServiceCredentialsUpdate {
	return &ServiceCredentialsUpdate{Context: ctx, Handler: handler}
}

/* ServiceCredentialsUpdate swagger:route POST /services/{ServiceID}/credentials service serviceCredentialsUpdate

updates service credentials

updates service credentials with passed data

*/
type ServiceCredentialsUpdate struct {
	Context *middleware.Context
	Handler ServiceCredentialsUpdateHandler
}

func (o *ServiceCredentialsUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewServiceCredentialsUpdateParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
