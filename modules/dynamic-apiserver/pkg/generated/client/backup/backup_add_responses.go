// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// BackupAddReader is a Reader for the BackupAdd structure.
type BackupAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BackupAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewBackupAddCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBackupAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBackupAddUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewBackupAddConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewBackupAddUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewBackupAddServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBackupAddCreated creates a BackupAddCreated with default headers values
func NewBackupAddCreated() *BackupAddCreated {
	return &BackupAddCreated{}
}

/* BackupAddCreated describes a response with status code 201, with default header values.

item created
*/
type BackupAddCreated struct {
	Payload *models.Backup
}

func (o *BackupAddCreated) Error() string {
	return fmt.Sprintf("[POST /backups/][%d] backupAddCreated  %+v", 201, o.Payload)
}
func (o *BackupAddCreated) GetPayload() *models.Backup {
	return o.Payload
}

func (o *BackupAddCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Backup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupAddBadRequest creates a BackupAddBadRequest with default headers values
func NewBackupAddBadRequest() *BackupAddBadRequest {
	return &BackupAddBadRequest{}
}

/* BackupAddBadRequest describes a response with status code 400, with default header values.

invalid input, object invalid
*/
type BackupAddBadRequest struct {
	Payload *models.Error
}

func (o *BackupAddBadRequest) Error() string {
	return fmt.Sprintf("[POST /backups/][%d] backupAddBadRequest  %+v", 400, o.Payload)
}
func (o *BackupAddBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *BackupAddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupAddUnauthorized creates a BackupAddUnauthorized with default headers values
func NewBackupAddUnauthorized() *BackupAddUnauthorized {
	return &BackupAddUnauthorized{}
}

/* BackupAddUnauthorized describes a response with status code 401, with default header values.

bad authentication
*/
type BackupAddUnauthorized struct {
}

func (o *BackupAddUnauthorized) Error() string {
	return fmt.Sprintf("[POST /backups/][%d] backupAddUnauthorized ", 401)
}

func (o *BackupAddUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBackupAddConflict creates a BackupAddConflict with default headers values
func NewBackupAddConflict() *BackupAddConflict {
	return &BackupAddConflict{}
}

/* BackupAddConflict describes a response with status code 409, with default header values.

item already exists
*/
type BackupAddConflict struct {
}

func (o *BackupAddConflict) Error() string {
	return fmt.Sprintf("[POST /backups/][%d] backupAddConflict ", 409)
}

func (o *BackupAddConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBackupAddUnprocessableEntity creates a BackupAddUnprocessableEntity with default headers values
func NewBackupAddUnprocessableEntity() *BackupAddUnprocessableEntity {
	return &BackupAddUnprocessableEntity{}
}

/* BackupAddUnprocessableEntity describes a response with status code 422, with default header values.

bad validation
*/
type BackupAddUnprocessableEntity struct {
	Payload *models.Error
}

func (o *BackupAddUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /backups/][%d] backupAddUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *BackupAddUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *BackupAddUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupAddServiceUnavailable creates a BackupAddServiceUnavailable with default headers values
func NewBackupAddServiceUnavailable() *BackupAddServiceUnavailable {
	return &BackupAddServiceUnavailable{}
}

/* BackupAddServiceUnavailable describes a response with status code 503, with default header values.

internal server error
*/
type BackupAddServiceUnavailable struct {
	Payload *models.Error
}

func (o *BackupAddServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /backups/][%d] backupAddServiceUnavailable  %+v", 503, o.Payload)
}
func (o *BackupAddServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *BackupAddServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
